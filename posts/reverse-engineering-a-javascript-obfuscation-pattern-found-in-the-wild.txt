2:I[1788,["36","static/chunks/36-50144f3c714f5f85.js","256","static/chunks/app/(posts)/posts/reverse-engineering-a-javascript-obfuscation-pattern-found-in-the-wild/page-e16f1385747e0cb4.js"],"default"]
6:I[9275,[],""]
7:I[1343,[],""]
8:I[8173,["173","static/chunks/173-a21b5f3753665d64.js","30","static/chunks/app/(main)/posts/page-89ccd5e651b4ee7a.js"],"Image"]
3:T4b4,for(i9 = a(),
  function(c, d, i8, e, f) {
    for (i8 = a(),
        e = c(), k = 0; k < 18; k++)
        try {
          if (f = Math.floor(parseInt(i8[4]) / 1 * (parseInt(i8[1]) / 2) + -parseInt(i8[8]) / 3 * (-parseInt(i8[6]) / 4) 
          + -parseInt(i8[12]) / 5 * (parseInt(i8[3]) / 6) + parseInt(i8[14]) / 7 * (-parseInt(i8[7]) / 8) 
          + parseInt(i8[10]) / 9 * (-parseInt(i8[9]) / 10) + parseInt(i8[14]) / 11 * (-parseInt(i8[2]) / 12) 
          + parseInt(i8[5]) / 13), f === d) break;
          else
              e.push(e.shift())
        } catch (g) {
          e.push(e.shift())
        }
  }(a, 86), hG = 0; 4 > hG; hG++) ;

// ...

function fB(d, ih, e, f, g) {
    ih = i9, 
    e = {}, 
    e[ih[2]] = function(h, i) {
        return i === h
    }, 
    e[ih[5]] = ih[1], 
    e[ih[7]] = ih[0],
    f = e, 
    g = d + ih[15], 
    !fv[ih[8]][ih[14]](ih[13]) && (f[ih[11]](fw[ih[10]][ih[12]], 
    f[ih[3]]) || fv[ih[6]] && !fy()) && (g += f[ih[9]]),
    fw[ih[4]] = g
}

// ... other functions structured similarly to the function "fB"

function a(li) {
    return li = "8,6,5,3,1,13,16,2,14,4,7,15,11,10,12,9".split(','),
    a = function() {
        return li
    },
    a()
}4:T17de,const parser = require("@babel/parser");
const traverse = require("@babel/traverse").default;
const t = require("@babel/types");
const generate = require("@babel/generator").default;
const fs = require('fs');
const vm = require('vm');

//deobfuscating function
//the code to deobfuscate is passed to the function parameter
function deobfuscator(obfuscatedCode){

  //hardcoded shuffling loop code for simplification
  const shuffling_loop_code = `for(i9 = a(),
  function(c, d, i8, e, f) {
    for (i8 = a(),
    e = c(), k = 0; k < 18; k++)
    try {
      if (f = Math.floor(parseInt(i8[4]) / 1 * (parseInt(i8[1]) / 2) + -parseInt(i8[8]) / 3 * (-parseInt(i8[6]) / 4) 
      + -parseInt(i8[12]) / 5 * (parseInt(i8[3]) / 6) + parseInt(i8[14]) / 7 * (-parseInt(i8[7]) / 8) 
      + parseInt(i8[10]) / 9 * (-parseInt(i8[9]) / 10) + parseInt(i8[14]) / 11 * (-parseInt(i8[2]) / 12) 
      + parseInt(i8[5]) / 13), f === d) break;
      else
      e.push(e.shift())
    } catch (g) {
      e.push(e.shift())
    }
  }(a, 86), hG = 0; 4 > hG; hG++) ;`;

  //create a virtual machine environment
  const vmContext = vm.createContext();
  
  //visitor matching function declaration nodes
  //contains the deobfuscation logics described in our procedure
  const functionDeclarationsVisitor = {
  
    FunctionDeclaration(path){
  
      //the node of the function declaration occurrence
      const functionNode = path.node;
      
      //search for the string-concealing function
      //checking if the function's name matches the name of the string-concealing function for simplification
      if(functionNode.id.name != 'a') return;
      
      //generate the code of the string-concealing function from its AST node 
      const stringConcealingCode = generate(functionNode).code;
      
      //run the string-concealing function along with the hardcoded shuffling loop in the virtual machine environment
      vm.runInContext(stringConcealingCode, vmContext);
      vm.runInContext(shuffling_loop_code, vmContext);
      
      //the array returned by the string-concealing function has now been shuffled in the execution environment
      //a call to the function a() in the execution context will return the shuffled array
      //call the string-concealing function in the execution context and assign the resolved value to a variable
      const shuffledArray = vm.runInContext('a()', vmContext);

      //get the identifier node name and the path of the string-concealing function
      const idName = functionNode.id.name;
      const idPath = path.get("id");
        
      //get the binding of the string-concealing function
      const binding = idPath.scope.getBinding(idName);

      //if the binding does not exist, return earlier
      if(!binding) return;

      //the string-concealing function must be constant
      //one constant violation occurs inside the string-concealing function definition, 
      //so we should check if there are more than one entries in the constantViolations array
      if(binding.constantViolations.length > 1) return;

      //a function to search for the references of an identifier, given its binding
      (function referencesHandler(binding){     

        //assigning the references of the string-concealing function to a variable
        const {referencePaths} = binding;
        
        //iterate through the references
        referencePaths.forEach((reference) => {
          
          //assigning each reference's parent path and parent node to distinct variables
          const {parentPath} = reference;
          const parentNode = parentPath.node;
    
          //check if the reference is part of an assignment expression 
          if(t.isAssignmentExpression(parentNode) || (t.isCallExpression(parentNode) && t.isAssignmentExpression(parentPath.parentPath.node))) {
          
            //the assignment path and the node of the left hand side of the assignment
            const assignmentPath = t.isAssignmentExpression(parentNode) ? parentPath : parentPath.parentPath;
            const leftHandNode = assignmentPath.node.left;

            //get the binding of the assignment
            const binding = assignmentPath.scope.getBinding(leftHandNode.name);

            if(!binding) return;

            //if the binding is not costant we risk breaking parts of the code
            //@isAssignmentConstantViolation flag to check whether or not the assignment is causing the binding to be non-constant
            //returns true either if the binding is costant or the assignment expression itself is the only node causing it to be non-costant
            const isAssignmentConstantViolation = !binding.constantViolations.filter((path) => {return path !== assignmentPath}).length;
            if(!isAssignmentConstantViolation) return;
            //iterate the process again to find the references of the left hand side of the assignment
            referencesHandler(binding);
        
          }else if(t.isMemberExpression(parentNode)){
            //make sure the member expression properties can be accessed using bracket notation and the property node type is numeric literal
            if(!(t.isNumericLiteral(parentNode.property) && parentNode.computed)) return;
            
            //replace the member expression path with the value of the corresponding element in the string-concealing array
            parentPath.replaceWith(t.valueToNode(shuffledArray[parentNode.property.value]));
            
          }
        })
      })(binding);
    }
  }

  //the AST parsed from the obfuscated code
  const ast = parser.parse(obfuscatedCode);
  
  //traversing the AST with our previously defined visitor
  traverse(ast, functionDeclarationsVisitor);
  
  //generating code from the AST
  const deobfuscatedCode = generate(ast).code;

  //writing the output to a file
  fs.writeFileSync("output.js", deobfuscatedCode, "utf-8");
  
}

//constant variable storing the obfuscated code retrieved from a js file
const code = fs.readFileSync('obfuscated_code.js', 'utf-8');

//call the deobfuscating function
deobfuscator(code);5:T1aca,const parser = require("@babel/parser");
const traverse = require("@babel/traverse").default;
const t = require("@babel/types");
const generate = require("@babel/generator").default;
const fs = require('fs');
const vm = require('vm');

//deobfuscating function
//the code to deobfuscate is passed to the function parameter
function deobfuscator(obfuscatedCode){

  //hardcoded shuffling loop code for simplification
  const shuffling_loop_code = `for(i9 = a(),
  function(c, d, i8, e, f) {
    for (i8 = a(),
    e = c(), k = 0; k < 18; k++)
    try {
      if (f = Math.floor(parseInt(i8[4]) / 1 * (parseInt(i8[1]) / 2) + -parseInt(i8[8]) / 3 * (-parseInt(i8[6]) / 4) 
      + -parseInt(i8[12]) / 5 * (parseInt(i8[3]) / 6) + parseInt(i8[14]) / 7 * (-parseInt(i8[7]) / 8) 
      + parseInt(i8[10]) / 9 * (-parseInt(i8[9]) / 10) + parseInt(i8[14]) / 11 * (-parseInt(i8[2]) / 12) 
      + parseInt(i8[5]) / 13), f === d) break;
      else
      e.push(e.shift())
    } catch (g) {
      e.push(e.shift())
    }
  }(a, 86), hG = 0; 4 > hG; hG++) ;`;

  //create a virtual machine environment
  const vmContext = vm.createContext();
  
  //visitor matching function declaration nodes
  //contains most of the deobfuscation logics described in our procedure
  const functionDeclarationsVisitor = {
  
    FunctionDeclaration(path){
  
      //the node of the function declaration occurrence
      const functionNode = path.node;
      
      //search for the string-concealing function
      //checking if the function's name matches the name of the string-concealing function for simplification
      if(functionNode.id.name != 'a') return;
      
      //generate the code of the string-concealing function from its AST node 
      const stringConcealingCode = generate(functionNode).code;
      
      //run the string-concealing function along with the hardcoded shuffling loop in the virtual machine environment
      vm.runInContext(stringConcealingCode, vmContext);
      vm.runInContext(shuffling_loop_code, vmContext);
      
      //the array returned by the string-concealing function has now been shuffled in the execution environment
      //a call to the function a() in the execution context will return the shuffled array
      //call the string-concealing function in the execution context and assign the resolved value to a variable
      const shuffledArray = vm.runInContext('a()', vmContext);

      //get the identifier node name and the path of the string-concealing function
      const idName = functionNode.id.name;
      const idPath = path.get("id");
      
      //get the binding of the string-concealing function
      const binding = idPath.scope.getBinding(idName);
        
      //if the binding does not exist, return earlier
      if(!binding) return;

      //the string-concealing function must be constant
      //one constant violation occurs inside the string-concealing function definition, 
      //so we should check if there are more than one entries in the constantViolations array
      if(binding.constantViolations.length > 1) return;

      //self-invoking function to search for the references of a binding
      (function referencesHandler(binding){

        //assigning the references of the string-concealing function to a variable
        const {referencePaths} = binding;

        //iterate through the references
        referencePaths.forEach((reference) => {
          
          //assigning each reference's parent path and parent node to distinct variables
          const {parentPath} = reference;
          const parentNode = parentPath.node;
    
          //check if the reference is part of an assignment expression 
          if(t.isAssignmentExpression(parentNode) || (t.isCallExpression(parentNode) && t.isAssignmentExpression(parentPath.parentPath.node))) {
            //the assignment path and the node of the left hand side of the assignment
            const assignmentPath = t.isAssignmentExpression(parentNode) ? parentPath : parentPath.parentPath;
            const leftHandNode = assignmentPath.node.left;

            //check if the binding of the left hand identifer exists
            if(!assignmentPath.scope.hasBinding(leftHandNode.name)){
              //create a variable declaration node initialized with the referenced variable
              const declarationNode = t.variableDeclaration("var", [t.variableDeclarator(leftHandNode, reference.node)]);
              //unshift the variable declaration node to the body of the program node
              parentPath.scope.getProgramParent().path.node.body.unshift(declarationNode);
              //now that the variable declaration has been created, remove the assignment path from the AST
              assignmentPath.remove();
              //update the binding of the reference
              parentPath.scope.getProgramParent().crawl();
            }

            //get the binding of the assignment
            const binding = assignmentPath.scope.getBinding(leftHandNode.name);

            //if the binding is not costant we risk breaking parts of the code
            //@isAssignmentConstantViolation flag to check whether or not the assignment is causing the binding to be non-constant
            //returns true either if the binding is costant or the assignment expression itself is the only node causing it to be non-costant
            const isAssignmentConstantViolation = !binding.constantViolations.filter((path) => {return path !== assignmentPath}).length;
            if(!isAssignmentConstantViolation) return;

            //iterate the process again to find the references of the left hand side of the assignment
            referencesHandler(binding);
        
          }else if(t.isMemberExpression(parentNode)){
            //make sure the member expression properties can be accessed using bracket notation and the property node type is numeric literal
            if(!(t.isNumericLiteral(parentNode.property) && parentNode.computed)) return;
            
            //replace the member expression path with the value of the corresponding element in the string-concealing array
            parentPath.replaceWith(t.valueToNode(shuffledArray[parentNode.property.value]));
            
          }
        })
      })(binding);
    }
  }

  //the AST parsed from the obfuscated code
  const ast = parser.parse(obfuscatedCode);
  
  //traversing the AST with our previously defined visitor
  traverse(ast, functionDeclarationsVisitor);
  
  //generating code from the AST
  const deobfuscatedCode = generate(ast).code;

  //writing the output to a file
  fs.writeFileSync("output.js", deobfuscatedCode, "utf-8");
  
}

//constant variable storing the obfuscated code retrieved from a js file
const code = fs.readFileSync('obfuscated_code.js', 'utf-8');

//call the deobfuscating function
deobfuscator(code);9:{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"}
a:{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"}
b:{"display":"inline-block"}
c:{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0}
0:["fMJ9rhDwn8Zx4gEwgoXyH",[[["",{"children":["(posts)",{"children":["posts",{"children":["reverse-engineering-a-javascript-obfuscation-pattern-found-in-the-wild",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true]}],["",{"children":["(posts)",{"children":["posts",{"children":["reverse-engineering-a-javascript-obfuscation-pattern-found-in-the-wild",{"children":["__PAGE__",{},[["$L1",["$","div",null,{"className":"post","children":[["$","h1",null,{"className":"title","children":[["$","a",null,{"href":"/posts","className":"back-arr","children":". . / "}],"Reverse Engineering a Javascript Obfuscation Pattern Found in the Wild"]}],["$","div",null,{"className":"flex flex-col mb-7","children":["$","p",null,{"className":"content-meta","children":[["$","time",null,{"children":"November 2, 2024"}]," - by DZCBxxyy"]}]}],["$","details",null,{"className":"mb-8","children":[["$","summary",null,{"children":"Table of Contents"}],["$","ol",null,{"className":"list-disc list-inside space-y-1 mt-2 pl-4 text-black","children":[["$","li",null,{"children":["$","a",null,{"href":"#introduction","children":"Introduction"}]}],["$","li",null,{"children":["$","a",null,{"href":"#obfuscation-pattern-analysis","children":"Obfuscation Pattern Analysis"}]}],["$","li",null,{"children":["$","a",null,{"href":"#writing-the-deobfuscator","children":"Writing the Deobfuscator"}]}]]}]]}],["$","div",null,{"className":"content","children":[["$","div",null,{"className":"content-box","children":[["$","h2",null,{"id":"introduction","children":"Introduction"}],["$","p",null,{"children":"Code obfuscation is the process of hiding the working mechanisms of a computer program by applying a range of transformation techniques to its source code. The original program is mapped to a program intended to be incomprehensible to human inspection in a way that preserves its functionalities, but makes it difficult to revert back to the source code."}],["$","p",null,{"children":"As computer programs can be a target of copyright infringement, code obfuscation represents a technical counter-measure to prevent proprietary code from being directly exposed. Reverse engineers are interested in understanding the underlying logics behind the obfuscation process in order to access a good-enough representation of the source code and gain insights about its functionalities."}],["$","p",null,{"children":["In this article we will analyze some of the obfuscation techniques, bundled together to form an obfuscation pattern, that I found while browsing around on the web, and share suggestions to tackle them. Our base approach will be that of generating what is known as an \"",["$","b",null,{"children":"Abstract Syntax Tree"}],"\" (",["$","b",null,{"children":"AST"}],") representation of the piece of code to analyze, by using a tool called ",["$","b",null,{"children":"Babel"}],", a Javascript transpiler. Refer to ",["$","a",null,{"target":"_blank","href":"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md","children":"this guide"}]," to learn more about the major API features of the Babel compiler. Lastly, after working out the logical steps to take to reverse the obfuscation techniques through the AST, we'll write a script to implement these logics and output a more human-readable transformation of the obfuscated code."]}]]}],["$","div",null,{"className":"content-box","children":[["$","h2",null,{"id":"obfuscation-pattern-analysis","children":"Obfuscation Pattern Analisys"}],["$","p",null,{"children":"We're going to analyze a script I found while playing around with Cloudflare's captcha system. To keep things simple, I'll provide a replica of the original code to work upon, a shorter sample which captures the essence of the obfuscation pattern."}],["$","div",null,{"className":"code-wrapper","children":["$","$L2",null,{"code":"$3","language":"js"}]}],["$","p",null,{"children":["A quick glance at the above code suggests a form of ",["$","b",null,{"children":"string-concealing obfuscation"}]," has been implemented, as we can see from the references to array elements inside the function ",["$","code",null,{"children":"fB"}],". We also notice that the references within ",["$","code",null,{"children":"fB"}]," points to the elements of the array ",["$","code",null,{"children":"ih"}],", but what seems to store the strings intended to replace these reference is the function ",["$","code",null,{"children":"a"}],", not the array ",["$","code",null,{"children":"ih"}],". Looking at the definition of ",["$","code",null,{"children":"a"}],", it returns an array obtained by splitting a hard-coded string by commas. As there is no direct correspondence between the references in ",["$","code",null,{"children":"fB"}]," and the array returned by ",["$","code",null,{"children":"a"}]," that we expect to be referenced, we could guess the string concealing technique is combined with the use of ",["$","b",null,{"children":"proxy variables"}],". In fact, this obfuscation pattern is multi-layered, as different obfuscation techniques are combined together to make things more complicated. Let's see how the original code looks like and perhaps confirm our guesses:"]}],["$","div",null,{"className":"code-wrapper","children":["$","$L2",null,{"code":"// ...\n\nfunction fB(d, e, f, g) {\n    e = {}, \n    e[\"1\"] = function(h, i) {\n        return i === h\n    }, \n    e[\"2\"] = \"3\", \n    e[\"4\"] = \"5\",\n    f = e, \n    g = d + \"6\", \n    !fv[\"7\"][\"8\"](\"9\") && (f[\"10\"](fw[\"11\"][\"12\"], \n    f[\"13\"]) || fv[\"14\"] && !fy()) && (g += f[\"15\"]),\n    fw[\"16\"] = g\n}\n\n// ... other functions structured similarly to the function \"fB\"","language":"js"}]}],["$","p",null,{"children":["Great! Now we know the references inside ",["$","code",null,{"children":"fB"}]," indirectly point to the array elements returned by ",["$","code",null,{"children":"a"}],". We could be tempted to try reversing this obfuscation technique simply by replacing these references with their corresponding value in that array. The reference ",["$","code",null,{"children":"ih[2]"}]," points to the value ",["$","code",null,{"children":"\"5°\""}]," of the array returned by calling ",["$","code",null,{"children":"a"}],". But in our original piece of code, we can clearly see that the value in place of ",["$","code",null,{"children":"ih[2]"}]," is ",["$","code",null,{"children":"\"1°\""}],". How could it be it?"]}],["$","p",null,{"children":["So far, we haven't considered the empty loop located at the top of the obfuscated code, which is responsible for shuffling the array entries returned by ",["$","code",null,{"children":"a"}],"."]}],["$","p",null,{"children":["Inside the initialization field of this loop, a function expression runs another loop, whose body is comprised of a try-catch statement. From there, all the variables involved in the computations point to the arguments of the anonymous function enclosing it, namely, the function ",["$","code",null,{"children":"a"}]," and the literal ",["$","code",null,{"children":"86"}],". Knowing about this information and following along the steps taken by the algorithm at each iteration, we are able to discern the logics driving the shuffling mechanism. Inside the ",["$","code",null,{"children":"try"}]," block, a value is computed and tested against the number ",["$","code",null,{"children":"86"}],". If the values match, then the ",["$","code",null,{"children":"if"}]," statement breaks out of the loop, either way, the array returned by ",["$","code",null,{"children":"a"}]," is \"shuffled\" by removing its first element and pushing that same element back to the end of the array. If any error occurs, the ",["$","code",null,{"children":"catch"}]," block will shuffle the array's entries once again. The loop either terminates by meeting the condition or after running eighteen times."]}],["$","p",null,{"children":["Having acquired a fair comprehension of the obfuscated code, we can go on developing a ",["$","b",null,{"children":"deobfuscator"}],"."]}]]}],["$","div",null,{"className":"content-box","children":[["$","h2",null,{"id":"writing-the-deobfuscator","children":"Writing the Deobfuscator"}],["$","p",null,{"children":"The approach we'll follow is that of parsing the program into an AST, manipulating its syntactic structure, and finally turning the modified AST back into code."}],["$","p",null,{"children":["The AST of a computer program is a ",["$","b",null,{"children":"graph tree"}]," representation of the program which describes its ",["$","b",null,{"children":"syntax"}],". Each element in the tree corresponds to a ",["$","b",null,{"children":"node"}],". The tree starts from a top-level node, representing the file itself, and develops in a descending manner, with each sub-node corresponding to a syntactic element of the program. The whole process of describing the structure of the AST is simplified by the concept of ",["$","b",null,{"children":"path"}],". From the ",["$","a",null,{"target":"_blank","href":"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#toc-paths","children":"Babel plugin guide"}],":"]}],["$","blockquote",null,{"children":["An AST generally has many Nodes, but how do Nodes relate to one another? We could have one giant mutable object that you manipulate and have full access to, or we can simplify this with ",["$","b",null,{"children":"Paths"}],".",["$","br",null,{}],"A ",["$","b",null,{"children":"Path"}]," is an object representation of the link between two nodes."]}],["$","p",null,{"children":"One problem here is identifying the shuffling loop in an automated way. For simplification, we will avoid dealing with this issue by hardcoding it in our deobfuscator. That is enough for our analysis since our use-case is that of analysing an instance of a piece of code, but there could be applications requiring the deobfuscation process to take a more dynamical approach, such as transforming the target code on the fly, as it is requested by the client. There are multiple ways to add up to the complexity of the deobfuscation process, one example is serving the client a modified instance of the protected script for each web request received."}],["$","p",null,{"children":"Let's build our deobfuscator upon the following brief procedure:"}],["$","ol",null,{"className":"list-o space-y-1","children":[["$","li",null,{"children":"Manually retrieve the shuffling loop statement in the obfuscated code and hardcode it in our deobfuscator."}],["$","li",null,{"children":["Traverse the AST to search for all function declarations until we come across the string-concealing function. To keep things simple, we retrieve the string-concealing function node by matching its identifier name ",["$","code",null,{"children":"a"}],"."]}],["$","li",null,{"children":["Generate code out of the string-concealing function node and run it along with the shuffling loop in a virtual machine environment (using node.js vm module). Call the string-concealing function in the same virtual machine environment and assign the result of the computations (the shuffled array) to a variable (that we name ",["$","code",null,{"children":"shuffledArray"}],")."]}],["$","li",null,{"children":["Get the ",["$","b",null,{"children":"binding"}]," of the string-concealing function to search for all its references. For each reference, we want to check if its node type is that of a member expression, supposed to take the place of the original value, or of a proxy variable. If the node is indicative of such member expressions, replace the node path with the value stored in ",["$","code",null,{"children":"shuffledArray"}],", matched by the corresponding index in the member expression. If it's part of a variable assignment, iterate this step again to search for the assigned variable's references, if there are any."]}]]}],["$","p",null,{"children":"The implementation script is provided below."}],["$","h3",null,{"className":"paragraph","children":"Implementation #1"}],["$","div",null,{"className":"code-wrapper","children":["$","$L2",null,{"code":"$4","language":"js"}]}],["$","h3",null,{"className":"paragraph","children":"Output.js #1"}],["$","div",null,{"className":"code-wrapper","children":["$","$L2",null,{"code":"for (i9 = a(), function (c, d, i8, e, f) {\n  for (i8 = a(), e = c(), k = 0; k < 18; k++) try {\n    if (f = Math.floor(parseInt(\"16\") / 1 * (parseInt(\"3\") / 2) + -parseInt(\"7\") / 3 * (-parseInt(\"14\") / 4) + -parseInt(\"12\") / 5 * (parseInt(\"13\") / 6) + parseInt(\"8\") / 7 * (-parseInt(\"4\") / 8) + parseInt(\"11\") / 9 * (-parseInt(\"15\") / 10) + parseInt(\"8\") / 11 * (-parseInt(\"1\") / 12) + parseInt(\"2\") / 13), f === d) break;else e.push(e.shift());\n  } catch (g) {\n    e.push(e.shift());\n  }\n}(a, 86), hG = 0; 4 > hG; hG++);\n\n// ...\n\nfunction fB(d, ih, e, f, g) {\n  ih = i9, e = {}, e[ih[2]] = function (h, i) {\n    return i === h;\n  }, e[ih[5]] = ih[1], e[ih[7]] = ih[0], f = e, g = d + ih[15], !fv[ih[8]][ih[14]](ih[13]) && (f[ih[11]](fw[ih[10]][ih[12]], f[ih[3]]) || fv[ih[6]] && !fy()) && (g += f[ih[9]]), fw[ih[4]] = g;\n}\n\n// ... other functions structured similarly to the function \"fB\"\n\nfunction a(li) {\n  return li = \"8,6,5,3,1,13,16,2,14,4,7,15,11,10,12,9\".split(','), a = function () {\n    return li;\n  }, a();\n}","language":"js"}]}],["$","p",null,{"children":["Our deobfuscator ran smoothly, but we can see that the references inside the function ",["$","code",null,{"children":"fB"}]," are standing still. Inspecting our deobfuscating script with a debugging tool, we discover that the ",["$","code",null,{"children":"getBinding()"}]," method called on the identifier ",["$","code",null,{"children":"i9"}]," returns ",["$","code",null,{"children":"undefined"}],", thus preventing the self-invoking function from retrieving its references. The reason for this lies in how Javascript treats assignments of undeclared variables in non-strict mode. From the ",["$","a",null,{"target":"_blank","href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment#description","children":"MDN web docs"}],":"]}],["$","blockquote",null,{"children":"y is assigned the value 5 ... If y is not a pre-existing variable, a global variable y is implicitly created in non-strict mode, or a ReferenceError is thrown in strict mode."}],["$","p",null,{"children":["In our case, the variable ",["$","code",null,{"children":"i9"}]," initialized inside the for loop parameters field is implicitly created in the global scope. That makes it an \"",["$","b",null,{"children":"unbinded"}],"\" variable, an undeclared variable referenced in the script."]}],["$","p",null,{"children":["We modify our deobfuscator to account for unbinded references by checking if the binding of the left hand identifier of the assignment exists. If it does not exist, we will turn the implicitly created variable \"explicit\" by declaring it on top in the AST. Then we will apply the Babel API method ",["$","code",null,{"children":"crawl()"}]," to the program scope, which syncs the binding of the identifier to reflect the changes in the updated AST structure. This method allows us to solve the issue by modifying a tiny portion of our previous script, but at the expense of traversing the AST each time an unbinded variable is encountered."]}],["$","h3",null,{"className":"paragraph","children":"Implementation #2"}],["$","div",null,{"className":"code-wrapper","children":["$","$L2",null,{"code":"$5","language":"js"}]}],["$","h3",null,{"className":"paragraph","children":"Output.js #2"}],["$","div",null,{"className":"code-wrapper","children":["$","$L2",null,{"code":"var i9;\nfor (i9 = a(), function (c, d, i8, e, f) {\n  for (i8 = a(), e = c(), k = 0; k < 18; k++) try {\n    if (f = Math.floor(parseInt(\"16\") / 1 * (parseInt(\"3\") / 2) + -parseInt(\"7\") / 3 * (-parseInt(\"14\") / 4) + -parseInt(\"12\") / 5 * (parseInt(\"13\") / 6) + parseInt(\"8\") / 7 * (-parseInt(\"4\") / 8) + parseInt(\"11\") / 9 * (-parseInt(\"15\") / 10) + parseInt(\"8\") / 11 * (-parseInt(\"1\") / 12) + parseInt(\"2\") / 13), f === d) break;else e.push(e.shift());\n  } catch (g) {\n    e.push(e.shift());\n  }\n}(a, 86), hG = 0; 4 > hG; hG++);\n\n// ...\n\nfunction fB(d, ih, e, f, g) {\n  ih = i9, e = {}, e[\"1\"] = function (h, i) {\n    return i === h;\n  }, e[\"2\"] = \"3\", e[\"4\"] = \"5\", f = e, g = d + \"6\", !fv[\"7\"][\"8\"](\"9\") && (f[\"10\"](fw[\"11\"][\"12\"], f[\"13\"]) || fv[\"14\"] && !fy()) && (g += f[\"15\"]), fw[\"16\"] = g;\n}\n\n// ... other functions structured similarly to the function \"fB\"\n\nfunction a(li) {\n  return li = \"8,6,5,3,1,13,16,2,14,4,7,15,11,10,12,9\".split(','), a = function () {\n    return li;\n  }, a();\n}","language":"js"}]}],["$","p",null,{"children":["Our second implementation worked accordingly. I want to point out that we can optimize the number of traversals by defining a ",["$","code",null,{"children":"ReferencedIdentifier"}]," visitor and calling ",["$","code",null,{"children":"crawl()"}]," once after all unbinded references have been explicitly declared. We also avoided dealing with the problem of getting rid of the string-concealing function, shuffle array and all proxy variables, but they could get removed from the script entirely under the condition that all the references get replaced. The clean up implementation could make use of flags to signal the occurence of certain events, such as the successful replacement of every reference. Refer to the \"String-Array Map Obfuscation\" case of ",["$","a",null,{"target":"_blank","href":"https://steakenthusiast.github.io/2022/05/22/Deobfuscating-Javascript-via-AST-Manipulation-Various-String-Concealing-Techniques/#Example-2-String-Array-Map-Obfuscation","children":"this blog post"}]," to see an example."]}]]}]]}],["$","div",null,{"className":"external-links","children":[["$","h3",null,{"className":"paragraph","children":"External Resources"}],["$","ol",null,{"className":"list-o space-y-1","children":[["$","li",null,{"children":["Jamie Kyle, ",["$","a",null,{"href":"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md","children":"Babel Plugin Handbook"}]]}],["$","li",null,{"children":["steakenthusiast.github.io, ",["$","a",null,{"href":"https://steakenthusiast.github.io/2022/05/22/Deobfuscating-Javascript-via-AST-Manipulation-Various-String-Concealing-Techniques/","children":"Deobfuscating Javascript via AST: Reversing Various String Concealing Techniques"}]]}]]}]]}]]}]],null],null]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","posts","children","reverse-engineering-a-javascript-obfuscation-pattern-found-in-the-wild","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"https://overthehorizon-radar.github.io/_next/static/css/750f727002964d55.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","main",null,{"className":"page_main__nw1Wk","children":[["$","div",null,{"className":"grid grid-cols-[auto] ratio:grid-cols-[auto_75vh] gap-28 pb-10","children":[["$","div",null,{"className":"flex flex-col min-w-73","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","(posts)","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","$L8",null,{"src":"/brush_stroke_circle_min.png","width":500,"height":500,"alt":"brush stroke circle","className":"max-w-[initial] sticky top-[4rem] w-0 ratio:w-[75vh] justify-self-center"}]]}],["$","footer",null,{"className":"bottom-0 pb-4 left-1/2 -translate-x-1/2 absolute text-center","children":[["$","span",null,{"children":"Content license:"}],["$","a",null,{"target":"_blank","href":"https://creativecommons.org/licenses/by-nc/4.0/","children":" CC BY-NC 4.0 "}],["$","span",null,{"children":"- Brush stroke circle image from nicepng.com"}]]}]]}]}]}],null],null]},["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":"$9","children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":"$a","children":"404"}],["$","div",null,{"style":"$b","children":["$","h2",null,{"style":"$c","children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"https://overthehorizon-radar.github.io/_next/static/css/4a616d0b88ec97f8.css","precedence":"next","crossOrigin":"$undefined"}]]}],null],[null,[null,"$Ld"]]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Reverse Engineering a Javascript Obfuscation Pattern Found in the Wild | overthehorizon-radar"}],["$","meta","3",{"name":"description","content":"In this article we will analyze some of the obfuscation techniques, bundled together to form an obfuscation pattern, that I found while browsing around on the web, and share suggestions to tackle them."}],["$","meta","4",{"name":"author","content":"DZCBxxyy"}],["$","meta","5",{"name":"keywords","content":"javascript,reverse engineering,obfuscation,babel,abstract syntax tree"}],["$","link","6",{"rel":"icon","href":"/icon.ico?1c24312d49d440c0","type":"image/x-icon","sizes":"96x96"}]]
1:null
